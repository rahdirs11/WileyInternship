-- Trigggers

-- Triggers are set of SQL statements thar stored in  the database

-- Triggers are associated to DML commands

-- insert
-- delete
-- update

-- The developers create triggers on these commands

-- This trigger will get automatically fired when you execite the above commands

Triggers are of 2 types

1. Before Trigger
	This is a trigger that gets fired before you execute the DML command

2. After Trigger
	This is a trigger that gets fored after the execution of DML commands


Insert
update 
delete

Before insert - activated before data is inserted
Before update - activated before the data is updated
Before Delete - activated before the data is deleted

After insert -- activated after the data is inserted
After update --- activated after the data is updates 
After delete  --- activated after the data is deleted


create trigger trigger_Name
After insert on table
for each row
begin


end;

use mthree_june

create table students
(s_id int primary key auto_increment,
sname varchar(20),
age int)


create table students_audit
(id int primary key auto_increment,
audit_data varchar(255)
)

the new student was inserted on 2 July 2021 9:56

select * from students;
select * from students_audit;


delimiter //
create trigger tr_AfterInsertStudents
After insert on students
for each row
begin
insert into students_audit
values (null,"Hello") ;

end //
delimiter ;

insert into students
values(null, "Harry", 21)

select * from students_audit

select * from students

drop trigger tr_AfterInsertStudents

-- create a new trigger ...
-- in the stu_audit
-- description --- the new student was inserted on current date and time


DELIMITER //
CREATE TRIGGER aftr_insert_student
AFTER INSERT ON students
FOR EACH ROW
BEGIN
	INSERT INTO students_audit
    VALUES (null,CONCAT('The new student was inserted on ',CURRENT_TIMESTAMP()));
END //
DELIMITER ;
select * from students_audit


insert into students
values(null, "Tom", 25)

select * from students_audit


-- create a trigger after delete

-- create a trigger for update

-- 

New
-- It will hold that record temporaily 
NEw information will be saved in this table
Old information will be saved in this table

Old
Trigger will that delete in the old table


update

-- There are 2 tables that get created 
-- The virtual tables are created
-- New -- It will store the new data in this table being genereated through insert or update
-- Old  -- the old data is stored here generated by delete and update


-- uodate 

update 
name= Sam
where name= Harry

-- delete command


DELIMITER //
CREATE TRIGGER aftr_insert_student1
AFTER INSERT ON students
FOR EACH ROW
BEGIN
	INSERT INTO students_audit
    VALUES (null,CONCAT(new.s_id, ' The new student was inserted on ',CURRENT_TIMESTAMP()));
END //
DELIMITER ;
insert into students
values(null, "Jack",35) 

select * from students;
select * from students_audit

select * from students
-- 
-- Create a trigger that store the data in the student_audit for the update command
-- The Name Jack was changed to Leo on 2 July 2021 11:300


create trigger tr_AftrUpdateStudents 
after update on students for each row begin insert into student_audit  
values (null, concat(old.s_id,"  student DELETED to Student ", new.s_id , current_timestamp())); end

create trigger student
after update on students3
for each row
begin
insert into students_audit
values(null,concat(old.s_id,update students3 set name='Harry' where name='Jck','name was changed at ',CURRENT_TIMESTAMP());
END //
DELIMITER ;



delimiter //
create trigger tr_AfterUpdateStudents2
after update on students
for each row
begin
insert into students_audit
values (null,concat(old.sname," The old student was renamed as ",new.sname," on ",CURRENT_TIMESTAMP()));
end //
delimiter ;


select * from students
select * from students_audit

update students
set sname="Leo" where sname="Jack"

drop table students_audit

drop

-- Before


insert into students
values(null, "Bradd",27)



insert 



select * from students
Amit
aMIT

aMit

amit
amit


#create a trigger for before insert

if the user enter the age < 0 then age must be inserted as zero




create trigger tr_before_insert
before insert on students
for each row
set new.sname=upper(new.sname)



--

-- 


delimiter //
 create trigger tr_before_insert1
 before insert on students
 for each row
 begin
 if new.age<0 then set new.age=0;
 end if;
 end //
 
 delimiter ;
 
 
 insert into students
 values (null,"Ross",-20)
 
 
 select * from students
 
 
 -- Triggers are good fpr performance
 -- They are good for the security
 
 -- Create a trigger that restricts the user from deleting the dats
 
 delimiter //
 create trigger bfr_delete2
 before delete on students
 for each row
 begin
 signal sqlstate '45000' set message_text= " User not allowed to delete the data";

 end //
 delimiter ;
 
 
 delete from students
 where s_id=1
 
 
select * from students 


